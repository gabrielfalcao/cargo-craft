use clap::{Parser, Subcommand, ValueEnum};
use clap::builder::{PossibleValue};
use std::fmt::Display;
{% if craft_lib %}
use {{ package_name }}::errors::Result;
{% endif %}

#[derive(Parser, Debug)]
#[command(author, version, about, long_about = "{{ package_name }}{% if craft_cli %}-cli{% else %}{% endif %}")]
pub struct Cli {
    #[command(subcommand)]
    pub command: Command,

    #[arg(short, long, default_value = "stdout")]
    output: Output,
}

#[derive(Debug, Clone, PartialEq, Eq, PartialOrd, Ord)]
pub enum Output {
    Stderr,
    Stdout,
}
impl Display for Output {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(
            f,
            "{}",
            match &self {
                Output::Stderr => "stderr",
                Output::Stdout => "stdout",
            }
        )
    }
}
impl ValueEnum for Output {
    fn value_variants<'a>() -> &'a [Self] {
        &[
            Output::Stderr,
            Output::Stdout,
        ]
    }

    fn to_possible_value(&self) -> Option<PossibleValue> {
        Some(
            PossibleValue::new(self.to_string())
                .alias(self.to_string().to_lowercase())
                .alias(self.to_string().to_uppercase()),
        )
    }

    fn from_str(input: &str, ignore_case: bool) -> std::result::Result<Output, String> {
        let input = if ignore_case { input.to_lowercase() } else { input.to_string() };
        let input = input.trim();

        Ok(match input.to_lowercase().as_str() {
            "stderr" => Output::Stderr,
            "stdout" => Output::Stdout,
            unknown => return Err(unknown.to_string()),
        })
    }
}

#[derive(Subcommand, Debug)]
pub enum Command {
    Hello(HelloOpt),
}

#[derive(Parser, Debug)]
pub struct HelloOpt {
    #[arg()]
    text: String,
}


{% if craft_lib %}
fn main() -> Result<()> {
{% else %}
fn main()  {
{% endif %}
    let args = Cli::parse();
    match args.command {
        Command::Hello(op) => match args.output {
            Output::Stdout => {
                println!("{}", op.text);
            },
            Output::Stderr => {
                eprintln!("{}", op.text);
            },
        },
    }
    {% if craft_lib %}
    Ok(())
    {% endif %}
}

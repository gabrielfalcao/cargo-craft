use clap::{Parser, Subcommand};

{% if craft_lib %}
use {{ package_name }}::{Result, Error};
{% if craft_subcommands %}
use {{ package_name }}::cli::{ParserDispatcher, SubcommandDispatcher, ArgsDispatcher};
{% else %}
use {{ package_name }}::cli::ParserDispatcher;
{% endif %}
{% endif %}
{% if craft_value_enum %}
use clap::builder::PossibleValue;
use clap::ValueEnum;
{% endif %}

#[derive(Parser, Debug)]
#[command(author, version, about, long_about = "{{ crate_name }}{% if craft_cli %} command-line{% else %}{% endif %}")]
pub struct Cli {
    {% if craft_subcommands %}
    #[command(subcommand)]
    pub command: Command,
    {% else %}
    #[arg()]
    text: String,
    {% if craft_value_enum %}
    #[arg(short, long, default_value = "stdout")]
    output: Output,
    {% endif %}
    {% endif %}
}
impl ParserDispatcher<Error> for Cli {
    fn dispatch(&self) -> Result<()> {
        {% if craft_subcommands %}
        self.command.dispatch()?;
        {% else %}
            {% if craft_value_enum %}
            match &self.output {
                Output::Stdout => {
                    println!("{}", &self.text);
                },
                Output::Stderr => {
                    eprintln!("{}", &self.text);
                },
            }
            {% else %}
            println!("{}", &self.text);
            {% endif %}
        {% endif %}
        Ok(())
    }
}


{% if craft_value_enum %}
#[derive(Debug, Clone, PartialEq, Eq, PartialOrd, Ord)]
pub enum Output {
    Stderr,
    Stdout,
}
impl std::fmt::Display for Output {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(
            f,
            "{}",
            match &self {
                Output::Stderr => "stderr",
                Output::Stdout => "stdout",
            }
        )
    }
}
impl ValueEnum for Output {
    fn value_variants<'a>() -> &'a [Self] {
        &[
            Output::Stderr,
            Output::Stdout,
        ]
    }

    fn to_possible_value(&self) -> Option<PossibleValue> {
        Some(
            PossibleValue::new(self.to_string())
                .alias(self.to_string().to_lowercase())
                .alias(self.to_string().to_uppercase()),
        )
    }

    fn from_str(input: &str, ignore_case: bool) -> std::result::Result<Output, String> {
        let input = if ignore_case { input.to_lowercase() } else { input.to_string() };
        let input = input.trim();

        Ok(match input.to_lowercase().as_str() {
            "stderr" => Output::Stderr,
            "stdout" => Output::Stdout,
            unknown => return Err(unknown.to_string()),
        })
    }
}
{% endif %}


{% if craft_subcommands %}
    #[derive(Subcommand, Debug)]
    pub enum Command {
        Hello(HelloOpt),
    }
    impl SubcommandDispatcher<Error> for Command {
        fn dispatch(&self) -> Result<()> {
            match self {
                Command::Hello(op) => op.dispatch()?,
            }
            Ok(())
        }
    }

    #[derive(Parser, Debug)]
    pub struct HelloOpt {
        #[arg()]
        text: String,
    {% if craft_value_enum %}
        #[arg(short, long, default_value = "stdout")]
        output: Output,
    {% endif %}
    }

    impl ArgsDispatcher<Error> for HelloOpt {
        fn dispatch(&self) -> Result<()> {
            {% if craft_value_enum %}
            match &self.output {
                Output::Stdout => {
                    println!("{}", &self.text);
                },
                Output::Stderr => {
                    eprintln!("{}", &self.text);
                },
            }
            {% else %}
            println!("{}", &self.text);
            {% endif %}
            Ok(())
        }
    }
{% endif %}

{% if craft_lib %}
fn main() -> Result<()> {
{% else %}
fn main()  {
{% endif %}
    Cli::main()
}
